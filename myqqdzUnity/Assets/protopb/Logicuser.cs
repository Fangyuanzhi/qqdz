// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: logicuser.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace logicProto {

  /// <summary>Holder for reflection information generated from logicuser.proto</summary>
  public static partial class LogicuserReflection {

    #region Descriptor
    /// <summary>File descriptor for logicuser.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogicuserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9sb2dpY3VzZXIucHJvdG8SCmxvZ2ljUHJvdG8idAoEVXNlchIMCgRuYW1l",
            "GAEgASgJEgoKAmlkGAIgASgEEg4KBnBhc3N3ZBgDIAEoCRIQCghyZVBhc3N3",
            "ZBgEIAEoCRIOCgZza2luSWQYBSABKA0SIAoFY29sb3IYBiABKAsyES5sb2dp",
            "Y1Byb3RvLkNvbG9yIlYKCFVzZXJJbmZvEgwKBG5hbWUYASABKAkSDQoFdG9r",
            "ZW4YAiABKAkSCgoCaWQYAyABKAQSDQoFbGV2ZWwYBCABKAUSEgoKZXhwZXJp",
            "ZW5jZRgFIAEoBSKJAQoIT3BlcmF0b3ISEAoIb3BlcmF0b3IYASABKAkSDQoF",
            "dG9rZW4YAiABKAkSHgoEdXNlchgDIAEoCzIQLmxvZ2ljUHJvdG8uVXNlchIe",
            "CgRyb29tGAQgASgLMhAubG9naWNQcm90by5Sb29tEhwKA2FjdBgGIAEoCzIP",
            "LmxvZ2ljUHJvdG8uQWN0IjkKC1JlcXVlc3RSb29tEgoKAm9wGAEgASgJEh4K",
            "BHJvb20YAiABKAsyEC5sb2dpY1Byb3RvLlJvb20iSwoMUmVzcG9uc2VSb29t",
            "Eg4KBnN0YXR1cxgBIAEoBRILCgNtc2cYAiABKAkSHgoEcm9vbRgDIAEoCzIQ",
            "LmxvZ2ljUHJvdG8uUm9vbSKTAQoIUmVzcG9uc2USDgoGc3RhdHVzGAEgASgF",
            "EgsKA21zZxgCIAEoCRImCgh1c2VyaW5mbxgDIAEoCzIULmxvZ2ljUHJvdG8u",
            "VXNlckluZm8SHgoEcm9vbRgEIAEoCzIQLmxvZ2ljUHJvdG8uUm9vbRIiCghV",
            "c2VyTGlzdBgFIAMoCzIQLmxvZ2ljUHJvdG8uVXNlciJ8CgxJbml0UmVzcG9u",
            "c2USDgoGc3RhdHVzGAEgASgFEgwKBHNpemUYAiABKAUSCwoDbXNnGAMgASgJ",
            "EiAKBnBsYXllchgEIAEoCzIQLmxvZ2ljUHJvdG8uQmFsbBIfCgVxdWFyaxgF",
            "IAMoCzIQLmxvZ2ljUHJvdG8uQmFsbCL7AQoOVXBkYXRlUmVzcG9uc2USDgoG",
            "c3RhdHVzGAEgASgFEgsKA21zZxgCIAEoCRIhCgdwbGF5ZXJzGAMgAygLMhAu",
            "bG9naWNQcm90by5CYWxsEh8KBWZvb2RzGAQgAygLMhAubG9naWNQcm90by5C",
            "YWxsEh8KBXNwb3JlGAUgAygLMhAubG9naWNQcm90by5CYWxsEiUKBmNhbVBv",
            "cxgGIAEoCzIVLmxvZ2ljUHJvdG8uQ2FtZXJhUG9zEiIKBHVzZXIYByABKAsy",
            "FC5sb2dpY1Byb3RvLlVzZXJJbmZvEhwKA3RvcBgIIAEoCzIPLmxvZ2ljUHJv",
            "dG8uVG9wIqoBCgRSb29tEgoKAmlkGAEgASgEEgwKBGFkZHIYAiABKAkSDwoH",
            "cGxheU51bRgDIAEoBRIPCgd3YWl0TnVtGAQgASgFEhAKCHJvYm90TnVtGAUg",
            "ASgFEhEKCXN0YXJ0VGltZRgGIAEoAxINCgV3aWR0aBgHIAEoAhIOCgZoZWln",
            "aHQYCCABKAISIgoIdXNlckxpc3QYCSADKAsyEC5sb2dpY1Byb3RvLlVzZXIi",
            "QAoDQWN0EgwKBHR5cGUYASABKAUSDQoFbW92ZVgYAiABKAISDQoFbW92ZVkY",
            "AyABKAISDQoFbW92ZVMYBCABKAIi6wEKBEJhbGwSCQoBeBgBIAEoAhIJCgF5",
            "GAIgASgCEgoKAm54GAMgASgCEgoKAm55GAQgASgCEg0KBXNjb3JlGAUgASgC",
            "EgwKBHR5cGUYBiABKA0SCgoCaWQYByABKA0SDQoFbW92ZVgYCCABKAISDQoF",
            "bW92ZVkYCSABKAISDQoFbW92ZVMYCiABKAISEgoKY3JlYXRlVGltZRgLIAEo",
            "AxILCgN1aWQYDCABKAQSDAoEbmFtZRgNIAEoCRIOCgZza2luSWQYDiABKA0S",
            "IAoFY29sb3IYDyABKAsyES5sb2dpY1Byb3RvLkNvbG9yIpcBCglDYW1lcmFQ",
            "b3MSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgoKAm54GAMgASgCEgoKAm55GAQg",
            "ASgCEgoKAnN4GAUgASgCEgoKAnN5GAYgASgCEgsKA25zeBgHIAEoAhILCgNu",
            "c3kYCCABKAISDQoFc2NvcmUYCSABKAISCgoCaWQYCiABKA0SDwoHY3VydGlt",
            "ZRgLIAEoAyItCgpDb29yZGluYXRlEgkKAXgYASABKAISCQoBeRgCIAEoAhIJ",
            "CgF6GAMgASgCIi4KBFBhaXISCwoDa2V5GAEgASgEEgwKBG5hbWUYAiABKAkS",
            "CwoDdmFsGAMgASgCIjMKBUNvbG9yEgkKAXIYASABKA0SCQoBZxgCIAEoDRIJ",
            "CgFiGAMgASgNEgkKAWEYBCABKA0iNAoDVG9wEg0KBW15VG9wGAEgASgFEh4K",
            "BHBhaXIYAiADKAsyEC5sb2dpY1Byb3RvLlBhaXIiOwoIVXNlckxpc3QSCwoD",
            "bnVtGAEgASgNEiIKCHVzZXJMaXN0GAIgAygLMhAubG9naWNQcm90by5Vc2Vy",
            "Ii4KCFJvb21MaXN0EiIKCHJvb21MaXN0GAEgAygLMhAubG9naWNQcm90by5S",
            "b29tIiIKA1JlcxIOCgZzdGF0dXMYASABKAUSCwoDbXNnGAIgASgJMnIKBE1l",
            "dGESMwoHR2V0Um9vbRIULmxvZ2ljUHJvdG8uVXNlckxpc3QaEC5sb2dpY1By",
            "b3RvLlJvb20iABI1CgpOb3RpZnlSb29tEhQubG9naWNQcm90by5Sb29tTGlz",
            "dBoPLmxvZ2ljUHJvdG8uUmVzIgBCDaoCCmxvZ2ljUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.User), global::logicProto.User.Parser, new[]{ "Name", "Id", "Passwd", "RePasswd", "SkinId", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.UserInfo), global::logicProto.UserInfo.Parser, new[]{ "Name", "Token", "Id", "Level", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Operator), global::logicProto.Operator.Parser, new[]{ "Operator_", "Token", "User", "Room", "Act" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.RequestRoom), global::logicProto.RequestRoom.Parser, new[]{ "Op", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.ResponseRoom), global::logicProto.ResponseRoom.Parser, new[]{ "Status", "Msg", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Response), global::logicProto.Response.Parser, new[]{ "Status", "Msg", "Userinfo", "Room", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.InitResponse), global::logicProto.InitResponse.Parser, new[]{ "Status", "Size", "Msg", "Player", "Quark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.UpdateResponse), global::logicProto.UpdateResponse.Parser, new[]{ "Status", "Msg", "Players", "Foods", "Spore", "CamPos", "User", "Top" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Room), global::logicProto.Room.Parser, new[]{ "Id", "Addr", "PlayNum", "WaitNum", "RobotNum", "StartTime", "Width", "Height", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Act), global::logicProto.Act.Parser, new[]{ "Type", "MoveX", "MoveY", "MoveS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Ball), global::logicProto.Ball.Parser, new[]{ "X", "Y", "Nx", "Ny", "Score", "Type", "Id", "MoveX", "MoveY", "MoveS", "CreateTime", "Uid", "Name", "SkinId", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.CameraPos), global::logicProto.CameraPos.Parser, new[]{ "X", "Y", "Nx", "Ny", "Sx", "Sy", "Nsx", "Nsy", "Score", "Id", "Curtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Coordinate), global::logicProto.Coordinate.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Pair), global::logicProto.Pair.Parser, new[]{ "Key", "Name", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Color), global::logicProto.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Top), global::logicProto.Top.Parser, new[]{ "MyTop", "Pair" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.UserList), global::logicProto.UserList.Parser, new[]{ "Num", "UserList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.RoomList), global::logicProto.RoomList.Parser, new[]{ "RoomList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::logicProto.Res), global::logicProto.Res.Parser, new[]{ "Status", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 用户相关
  /// </summary>
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      passwd_ = other.passwd_;
      rePasswd_ = other.rePasswd_;
      skinId_ = other.skinId_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 3;
    private string passwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rePasswd" field.</summary>
    public const int RePasswdFieldNumber = 4;
    private string rePasswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RePasswd {
      get { return rePasswd_; }
      set {
        rePasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skinId" field.</summary>
    public const int SkinIdFieldNumber = 5;
    private uint skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::logicProto.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Passwd != other.Passwd) return false;
      if (RePasswd != other.RePasswd) return false;
      if (SkinId != other.SkinId) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      if (RePasswd.Length != 0) hash ^= RePasswd.GetHashCode();
      if (SkinId != 0) hash ^= SkinId.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Id != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Id);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Passwd);
      }
      if (RePasswd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RePasswd);
      }
      if (SkinId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SkinId);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (RePasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RePasswd);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinId);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
      if (other.RePasswd.Length != 0) {
        RePasswd = other.RePasswd;
      }
      if (other.SkinId != 0) {
        SkinId = other.SkinId;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::logicProto.Color();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadUInt64();
            break;
          }
          case 26: {
            Passwd = input.ReadString();
            break;
          }
          case 34: {
            RePasswd = input.ReadString();
            break;
          }
          case 40: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::logicProto.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      name_ = other.name_;
      token_ = other.token_;
      id_ = other.id_;
      level_ = other.level_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 5;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Token != other.Token) return false;
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Id != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Experience != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadUInt64();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Experience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求和放回
  /// </summary>
  public sealed partial class Operator : pb::IMessage<Operator> {
    private static readonly pb::MessageParser<Operator> _parser = new pb::MessageParser<Operator>(() => new Operator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operator(Operator other) : this() {
      operator_ = other.operator_;
      token_ = other.token_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      room_ = other.room_ != null ? other.room_.Clone() : null;
      act_ = other.act_ != null ? other.act_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operator Clone() {
      return new Operator(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int Operator_FieldNumber = 1;
    private string operator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Operator_ {
      get { return operator_; }
      set {
        operator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::logicProto.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 4;
    private global::logicProto.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 6;
    private global::logicProto.Act act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Act Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator_ != other.Operator_) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (!object.Equals(Act, other.Act)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator_.Length != 0) hash ^= Operator_.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (act_ != null) hash ^= Act.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Operator_);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      if (room_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Room);
      }
      if (act_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Operator_);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (act_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Act);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operator other) {
      if (other == null) {
        return;
      }
      if (other.Operator_.Length != 0) {
        Operator_ = other.Operator_;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::logicProto.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.room_ != null) {
        if (room_ == null) {
          Room = new global::logicProto.Room();
        }
        Room.MergeFrom(other.Room);
      }
      if (other.act_ != null) {
        if (act_ == null) {
          Act = new global::logicProto.Act();
        }
        Act.MergeFrom(other.Act);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Operator_ = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::logicProto.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 34: {
            if (room_ == null) {
              Room = new global::logicProto.Room();
            }
            input.ReadMessage(Room);
            break;
          }
          case 50: {
            if (act_ == null) {
              Act = new global::logicProto.Act();
            }
            input.ReadMessage(Act);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestRoom : pb::IMessage<RequestRoom> {
    private static readonly pb::MessageParser<RequestRoom> _parser = new pb::MessageParser<RequestRoom>(() => new RequestRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoom(RequestRoom other) : this() {
      op_ = other.op_;
      room_ = other.room_ != null ? other.room_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoom Clone() {
      return new RequestRoom(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private string op_ = "";
    /// <summary>
    /// "register'、 "update"、 "logoff"、
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Op {
      get { return op_; }
      set {
        op_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::logicProto.Room room_;
    /// <summary>
    /// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op.Length != 0) hash ^= Op.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Op);
      }
      if (room_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Op);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestRoom other) {
      if (other == null) {
        return;
      }
      if (other.Op.Length != 0) {
        Op = other.Op;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          Room = new global::logicProto.Room();
        }
        Room.MergeFrom(other.Room);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Op = input.ReadString();
            break;
          }
          case 18: {
            if (room_ == null) {
              Room = new global::logicProto.Room();
            }
            input.ReadMessage(Room);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseRoom : pb::IMessage<ResponseRoom> {
    private static readonly pb::MessageParser<ResponseRoom> _parser = new pb::MessageParser<ResponseRoom>(() => new ResponseRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRoom(ResponseRoom other) : this() {
      status_ = other.status_;
      msg_ = other.msg_;
      room_ = other.room_ != null ? other.room_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRoom Clone() {
      return new ResponseRoom(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 3;
    private global::logicProto.Room room_;
    /// <summary>
    /// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Msg != other.Msg) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (room_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Room);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseRoom other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          Room = new global::logicProto.Room();
        }
        Room.MergeFrom(other.Room);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            if (room_ == null) {
              Room = new global::logicProto.Room();
            }
            input.ReadMessage(Room);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      msg_ = other.msg_;
      userinfo_ = other.userinfo_ != null ? other.userinfo_.Clone() : null;
      room_ = other.room_ != null ? other.room_.Clone() : null;
      userList_ = other.userList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userinfo" field.</summary>
    public const int UserinfoFieldNumber = 3;
    private global::logicProto.UserInfo userinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.UserInfo Userinfo {
      get { return userinfo_; }
      set {
        userinfo_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 4;
    private global::logicProto.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "UserList" field.</summary>
    public const int UserListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::logicProto.User> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(42, global::logicProto.User.Parser);
    private readonly pbc::RepeatedField<global::logicProto.User> userList_ = new pbc::RepeatedField<global::logicProto.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.User> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Msg != other.Msg) return false;
      if (!object.Equals(Userinfo, other.Userinfo)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (userinfo_ != null) hash ^= Userinfo.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (userinfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Userinfo);
      }
      if (room_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Room);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (userinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Userinfo);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.userinfo_ != null) {
        if (userinfo_ == null) {
          Userinfo = new global::logicProto.UserInfo();
        }
        Userinfo.MergeFrom(other.Userinfo);
      }
      if (other.room_ != null) {
        if (room_ == null) {
          Room = new global::logicProto.Room();
        }
        Room.MergeFrom(other.Room);
      }
      userList_.Add(other.userList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            if (userinfo_ == null) {
              Userinfo = new global::logicProto.UserInfo();
            }
            input.ReadMessage(Userinfo);
            break;
          }
          case 34: {
            if (room_ == null) {
              Room = new global::logicProto.Room();
            }
            input.ReadMessage(Room);
            break;
          }
          case 42: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitResponse : pb::IMessage<InitResponse> {
    private static readonly pb::MessageParser<InitResponse> _parser = new pb::MessageParser<InitResponse>(() => new InitResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitResponse(InitResponse other) : this() {
      status_ = other.status_;
      size_ = other.size_;
      msg_ = other.msg_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      quark_ = other.quark_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitResponse Clone() {
      return new InitResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 4;
    private global::logicProto.Ball player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Ball Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "quark" field.</summary>
    public const int QuarkFieldNumber = 5;
    private static readonly pb::FieldCodec<global::logicProto.Ball> _repeated_quark_codec
        = pb::FieldCodec.ForMessage(42, global::logicProto.Ball.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Ball> quark_ = new pbc::RepeatedField<global::logicProto.Ball>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Ball> Quark {
      get { return quark_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Size != other.Size) return false;
      if (Msg != other.Msg) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if(!quark_.Equals(other.quark_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      hash ^= quark_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      quark_.WriteTo(output, _repeated_quark_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      size += quark_.CalculateSize(_repeated_quark_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::logicProto.Ball();
        }
        Player.MergeFrom(other.Player);
      }
      quark_.Add(other.quark_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 34: {
            if (player_ == null) {
              Player = new global::logicProto.Ball();
            }
            input.ReadMessage(Player);
            break;
          }
          case 42: {
            quark_.AddEntriesFrom(input, _repeated_quark_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      status_ = other.status_;
      msg_ = other.msg_;
      players_ = other.players_.Clone();
      foods_ = other.foods_.Clone();
      spore_ = other.spore_.Clone();
      camPos_ = other.camPos_ != null ? other.camPos_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      top_ = other.top_ != null ? other.top_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::logicProto.Ball> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::logicProto.Ball.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Ball> players_ = new pbc::RepeatedField<global::logicProto.Ball>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Ball> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "foods" field.</summary>
    public const int FoodsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::logicProto.Ball> _repeated_foods_codec
        = pb::FieldCodec.ForMessage(34, global::logicProto.Ball.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Ball> foods_ = new pbc::RepeatedField<global::logicProto.Ball>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Ball> Foods {
      get { return foods_; }
    }

    /// <summary>Field number for the "spore" field.</summary>
    public const int SporeFieldNumber = 5;
    private static readonly pb::FieldCodec<global::logicProto.Ball> _repeated_spore_codec
        = pb::FieldCodec.ForMessage(42, global::logicProto.Ball.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Ball> spore_ = new pbc::RepeatedField<global::logicProto.Ball>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Ball> Spore {
      get { return spore_; }
    }

    /// <summary>Field number for the "camPos" field.</summary>
    public const int CamPosFieldNumber = 6;
    private global::logicProto.CameraPos camPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.CameraPos CamPos {
      get { return camPos_; }
      set {
        camPos_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private global::logicProto.UserInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.UserInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 8;
    private global::logicProto.Top top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Top Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Msg != other.Msg) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!foods_.Equals(other.foods_)) return false;
      if(!spore_.Equals(other.spore_)) return false;
      if (!object.Equals(CamPos, other.CamPos)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Top, other.Top)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= foods_.GetHashCode();
      hash ^= spore_.GetHashCode();
      if (camPos_ != null) hash ^= CamPos.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (top_ != null) hash ^= Top.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      players_.WriteTo(output, _repeated_players_codec);
      foods_.WriteTo(output, _repeated_foods_codec);
      spore_.WriteTo(output, _repeated_spore_codec);
      if (camPos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CamPos);
      }
      if (user_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(User);
      }
      if (top_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Top);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += foods_.CalculateSize(_repeated_foods_codec);
      size += spore_.CalculateSize(_repeated_spore_codec);
      if (camPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CamPos);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      players_.Add(other.players_);
      foods_.Add(other.foods_);
      spore_.Add(other.spore_);
      if (other.camPos_ != null) {
        if (camPos_ == null) {
          CamPos = new global::logicProto.CameraPos();
        }
        CamPos.MergeFrom(other.CamPos);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::logicProto.UserInfo();
        }
        User.MergeFrom(other.User);
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::logicProto.Top();
        }
        Top.MergeFrom(other.Top);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            foods_.AddEntriesFrom(input, _repeated_foods_codec);
            break;
          }
          case 42: {
            spore_.AddEntriesFrom(input, _repeated_spore_codec);
            break;
          }
          case 50: {
            if (camPos_ == null) {
              CamPos = new global::logicProto.CameraPos();
            }
            input.ReadMessage(CamPos);
            break;
          }
          case 58: {
            if (user_ == null) {
              User = new global::logicProto.UserInfo();
            }
            input.ReadMessage(User);
            break;
          }
          case 66: {
            if (top_ == null) {
              Top = new global::logicProto.Top();
            }
            input.ReadMessage(Top);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      id_ = other.id_;
      addr_ = other.addr_;
      playNum_ = other.playNum_;
      waitNum_ = other.waitNum_;
      robotNum_ = other.robotNum_;
      startTime_ = other.startTime_;
      width_ = other.width_;
      height_ = other.height_;
      userList_ = other.userList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playNum" field.</summary>
    public const int PlayNumFieldNumber = 3;
    private int playNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayNum {
      get { return playNum_; }
      set {
        playNum_ = value;
      }
    }

    /// <summary>Field number for the "waitNum" field.</summary>
    public const int WaitNumFieldNumber = 4;
    private int waitNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitNum {
      get { return waitNum_; }
      set {
        waitNum_ = value;
      }
    }

    /// <summary>Field number for the "robotNum" field.</summary>
    public const int RobotNumFieldNumber = 5;
    private int robotNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotNum {
      get { return robotNum_; }
      set {
        robotNum_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 7;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 8;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "userList" field.</summary>
    public const int UserListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::logicProto.User> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(74, global::logicProto.User.Parser);
    private readonly pbc::RepeatedField<global::logicProto.User> userList_ = new pbc::RepeatedField<global::logicProto.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.User> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Addr != other.Addr) return false;
      if (PlayNum != other.PlayNum) return false;
      if (WaitNum != other.WaitNum) return false;
      if (RobotNum != other.RobotNum) return false;
      if (StartTime != other.StartTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (PlayNum != 0) hash ^= PlayNum.GetHashCode();
      if (WaitNum != 0) hash ^= WaitNum.GetHashCode();
      if (RobotNum != 0) hash ^= RobotNum.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      hash ^= userList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (PlayNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayNum);
      }
      if (WaitNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WaitNum);
      }
      if (RobotNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RobotNum);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartTime);
      }
      if (Width != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Height);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (PlayNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayNum);
      }
      if (WaitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitNum);
      }
      if (RobotNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotNum);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.PlayNum != 0) {
        PlayNum = other.PlayNum;
      }
      if (other.WaitNum != 0) {
        WaitNum = other.WaitNum;
      }
      if (other.RobotNum != 0) {
        RobotNum = other.RobotNum;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      userList_.Add(other.userList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
          case 24: {
            PlayNum = input.ReadInt32();
            break;
          }
          case 32: {
            WaitNum = input.ReadInt32();
            break;
          }
          case 40: {
            RobotNum = input.ReadInt32();
            break;
          }
          case 48: {
            StartTime = input.ReadInt64();
            break;
          }
          case 61: {
            Width = input.ReadFloat();
            break;
          }
          case 69: {
            Height = input.ReadFloat();
            break;
          }
          case 74: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Act : pb::IMessage<Act> {
    private static readonly pb::MessageParser<Act> _parser = new pb::MessageParser<Act>(() => new Act());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Act> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act(Act other) : this() {
      type_ = other.type_;
      moveX_ = other.moveX_;
      moveY_ = other.moveY_;
      moveS_ = other.moveS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act Clone() {
      return new Act(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 操作类型 吐袍子，分身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "moveX" field.</summary>
    public const int MoveXFieldNumber = 2;
    private float moveX_;
    /// <summary>
    /// 方向x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveX {
      get { return moveX_; }
      set {
        moveX_ = value;
      }
    }

    /// <summary>Field number for the "moveY" field.</summary>
    public const int MoveYFieldNumber = 3;
    private float moveY_;
    /// <summary>
    /// 方向y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveY {
      get { return moveY_; }
      set {
        moveY_ = value;
      }
    }

    /// <summary>Field number for the "moveS" field.</summary>
    public const int MoveSFieldNumber = 4;
    private float moveS_;
    /// <summary>
    /// 速度s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveS {
      get { return moveS_; }
      set {
        moveS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Act);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Act other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveX, other.MoveX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveY, other.MoveY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveS, other.MoveS)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MoveX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveX);
      if (MoveY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveY);
      if (MoveS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveS);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (MoveX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MoveX);
      }
      if (MoveY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MoveY);
      }
      if (MoveS != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (MoveX != 0F) {
        size += 1 + 4;
      }
      if (MoveY != 0F) {
        size += 1 + 4;
      }
      if (MoveS != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Act other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MoveX != 0F) {
        MoveX = other.MoveX;
      }
      if (other.MoveY != 0F) {
        MoveY = other.MoveY;
      }
      if (other.MoveS != 0F) {
        MoveS = other.MoveS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 21: {
            MoveX = input.ReadFloat();
            break;
          }
          case 29: {
            MoveY = input.ReadFloat();
            break;
          }
          case 37: {
            MoveS = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ball : pb::IMessage<Ball> {
    private static readonly pb::MessageParser<Ball> _parser = new pb::MessageParser<Ball>(() => new Ball());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ball> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ball() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ball(Ball other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      nx_ = other.nx_;
      ny_ = other.ny_;
      score_ = other.score_;
      type_ = other.type_;
      id_ = other.id_;
      moveX_ = other.moveX_;
      moveY_ = other.moveY_;
      moveS_ = other.moveS_;
      createTime_ = other.createTime_;
      uid_ = other.uid_;
      name_ = other.name_;
      skinId_ = other.skinId_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ball Clone() {
      return new Ball(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "nx" field.</summary>
    public const int NxFieldNumber = 3;
    private float nx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Nx {
      get { return nx_; }
      set {
        nx_ = value;
      }
    }

    /// <summary>Field number for the "ny" field.</summary>
    public const int NyFieldNumber = 4;
    private float ny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ny {
      get { return ny_; }
      set {
        ny_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private float score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private uint id_;
    /// <summary>
    ///  unity实例的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "moveX" field.</summary>
    public const int MoveXFieldNumber = 8;
    private float moveX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveX {
      get { return moveX_; }
      set {
        moveX_ = value;
      }
    }

    /// <summary>Field number for the "moveY" field.</summary>
    public const int MoveYFieldNumber = 9;
    private float moveY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveY {
      get { return moveY_; }
      set {
        moveY_ = value;
      }
    }

    /// <summary>Field number for the "moveS" field.</summary>
    public const int MoveSFieldNumber = 10;
    private float moveS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveS {
      get { return moveS_; }
      set {
        moveS_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 12;
    private ulong uid_;
    /// <summary>
    /// 玩家的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skinId" field.</summary>
    public const int SkinIdFieldNumber = 14;
    private uint skinId_;
    /// <summary>
    /// 皮肤id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 15;
    private global::logicProto.Color color_;
    /// <summary>
    /// 颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::logicProto.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ball);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ball other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Nx, other.Nx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ny, other.Ny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveX, other.MoveX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveY, other.MoveY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveS, other.MoveS)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (SkinId != other.SkinId) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Nx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Nx);
      if (Ny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ny);
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MoveX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveX);
      if (MoveY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveY);
      if (MoveS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveS);
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SkinId != 0) hash ^= SkinId.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Nx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Nx);
      }
      if (Ny != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Ny);
      }
      if (Score != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Score);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Id);
      }
      if (MoveX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MoveX);
      }
      if (MoveY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MoveY);
      }
      if (MoveS != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MoveS);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CreateTime);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (SkinId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SkinId);
      }
      if (color_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Nx != 0F) {
        size += 1 + 4;
      }
      if (Ny != 0F) {
        size += 1 + 4;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MoveX != 0F) {
        size += 1 + 4;
      }
      if (MoveY != 0F) {
        size += 1 + 4;
      }
      if (MoveS != 0F) {
        size += 1 + 4;
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinId);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ball other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Nx != 0F) {
        Nx = other.Nx;
      }
      if (other.Ny != 0F) {
        Ny = other.Ny;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MoveX != 0F) {
        MoveX = other.MoveX;
      }
      if (other.MoveY != 0F) {
        MoveY = other.MoveY;
      }
      if (other.MoveS != 0F) {
        MoveS = other.MoveS;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SkinId != 0) {
        SkinId = other.SkinId;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::logicProto.Color();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Nx = input.ReadFloat();
            break;
          }
          case 37: {
            Ny = input.ReadFloat();
            break;
          }
          case 45: {
            Score = input.ReadFloat();
            break;
          }
          case 48: {
            Type = input.ReadUInt32();
            break;
          }
          case 56: {
            Id = input.ReadUInt32();
            break;
          }
          case 69: {
            MoveX = input.ReadFloat();
            break;
          }
          case 77: {
            MoveY = input.ReadFloat();
            break;
          }
          case 85: {
            MoveS = input.ReadFloat();
            break;
          }
          case 88: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 96: {
            Uid = input.ReadUInt64();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 112: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 122: {
            if (color_ == null) {
              Color = new global::logicProto.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraPos : pb::IMessage<CameraPos> {
    private static readonly pb::MessageParser<CameraPos> _parser = new pb::MessageParser<CameraPos>(() => new CameraPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraPos(CameraPos other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      nx_ = other.nx_;
      ny_ = other.ny_;
      sx_ = other.sx_;
      sy_ = other.sy_;
      nsx_ = other.nsx_;
      nsy_ = other.nsy_;
      score_ = other.score_;
      id_ = other.id_;
      curtime_ = other.curtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraPos Clone() {
      return new CameraPos(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "nx" field.</summary>
    public const int NxFieldNumber = 3;
    private float nx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Nx {
      get { return nx_; }
      set {
        nx_ = value;
      }
    }

    /// <summary>Field number for the "ny" field.</summary>
    public const int NyFieldNumber = 4;
    private float ny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ny {
      get { return ny_; }
      set {
        ny_ = value;
      }
    }

    /// <summary>Field number for the "sx" field.</summary>
    public const int SxFieldNumber = 5;
    private float sx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sx {
      get { return sx_; }
      set {
        sx_ = value;
      }
    }

    /// <summary>Field number for the "sy" field.</summary>
    public const int SyFieldNumber = 6;
    private float sy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sy {
      get { return sy_; }
      set {
        sy_ = value;
      }
    }

    /// <summary>Field number for the "nsx" field.</summary>
    public const int NsxFieldNumber = 7;
    private float nsx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Nsx {
      get { return nsx_; }
      set {
        nsx_ = value;
      }
    }

    /// <summary>Field number for the "nsy" field.</summary>
    public const int NsyFieldNumber = 8;
    private float nsy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Nsy {
      get { return nsy_; }
      set {
        nsy_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 9;
    private float score_;
    /// <summary>
    ///当前玩家分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private uint id_;
    /// <summary>
    /// 主球id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 11;
    private long curtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Nx, other.Nx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ny, other.Ny)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sx, other.Sx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sy, other.Sy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Nsx, other.Nsx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Nsy, other.Nsy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if (Id != other.Id) return false;
      if (Curtime != other.Curtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Nx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Nx);
      if (Ny != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ny);
      if (Sx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sx);
      if (Sy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sy);
      if (Nsx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Nsx);
      if (Nsy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Nsy);
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Curtime != 0L) hash ^= Curtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Nx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Nx);
      }
      if (Ny != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Ny);
      }
      if (Sx != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Sx);
      }
      if (Sy != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Sy);
      }
      if (Nsx != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Nsx);
      }
      if (Nsy != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Nsy);
      }
      if (Score != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Score);
      }
      if (Id != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Id);
      }
      if (Curtime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Curtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Nx != 0F) {
        size += 1 + 4;
      }
      if (Ny != 0F) {
        size += 1 + 4;
      }
      if (Sx != 0F) {
        size += 1 + 4;
      }
      if (Sy != 0F) {
        size += 1 + 4;
      }
      if (Nsx != 0F) {
        size += 1 + 4;
      }
      if (Nsy != 0F) {
        size += 1 + 4;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Curtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraPos other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Nx != 0F) {
        Nx = other.Nx;
      }
      if (other.Ny != 0F) {
        Ny = other.Ny;
      }
      if (other.Sx != 0F) {
        Sx = other.Sx;
      }
      if (other.Sy != 0F) {
        Sy = other.Sy;
      }
      if (other.Nsx != 0F) {
        Nsx = other.Nsx;
      }
      if (other.Nsy != 0F) {
        Nsy = other.Nsy;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Curtime != 0L) {
        Curtime = other.Curtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Nx = input.ReadFloat();
            break;
          }
          case 37: {
            Ny = input.ReadFloat();
            break;
          }
          case 45: {
            Sx = input.ReadFloat();
            break;
          }
          case 53: {
            Sy = input.ReadFloat();
            break;
          }
          case 61: {
            Nsx = input.ReadFloat();
            break;
          }
          case 69: {
            Nsy = input.ReadFloat();
            break;
          }
          case 77: {
            Score = input.ReadFloat();
            break;
          }
          case 80: {
            Id = input.ReadUInt32();
            break;
          }
          case 88: {
            Curtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Coordinate : pb::IMessage<Coordinate> {
    private static readonly pb::MessageParser<Coordinate> _parser = new pb::MessageParser<Coordinate>(() => new Coordinate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coordinate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate(Coordinate other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate Clone() {
      return new Coordinate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coordinate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coordinate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coordinate other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private ulong key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 3;
    private float val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Val, other.Val)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0UL) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Val != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Val);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Val != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Val != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0UL) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Val != 0F) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Val = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private uint a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (A != other.A) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (A != 0) hash ^= A.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
      if (A != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.A != 0) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
          case 32: {
            A = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Top : pb::IMessage<Top> {
    private static readonly pb::MessageParser<Top> _parser = new pb::MessageParser<Top>(() => new Top());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Top> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Top() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Top(Top other) : this() {
      myTop_ = other.myTop_;
      pair_ = other.pair_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Top Clone() {
      return new Top(this);
    }

    /// <summary>Field number for the "myTop" field.</summary>
    public const int MyTopFieldNumber = 1;
    private int myTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyTop {
      get { return myTop_; }
      set {
        myTop_ = value;
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 2;
    private static readonly pb::FieldCodec<global::logicProto.Pair> _repeated_pair_codec
        = pb::FieldCodec.ForMessage(18, global::logicProto.Pair.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Pair> pair_ = new pbc::RepeatedField<global::logicProto.Pair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Pair> Pair {
      get { return pair_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Top);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Top other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyTop != other.MyTop) return false;
      if(!pair_.Equals(other.pair_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MyTop != 0) hash ^= MyTop.GetHashCode();
      hash ^= pair_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MyTop != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MyTop);
      }
      pair_.WriteTo(output, _repeated_pair_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MyTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyTop);
      }
      size += pair_.CalculateSize(_repeated_pair_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Top other) {
      if (other == null) {
        return;
      }
      if (other.MyTop != 0) {
        MyTop = other.MyTop;
      }
      pair_.Add(other.pair_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MyTop = input.ReadInt32();
            break;
          }
          case 18: {
            pair_.AddEntriesFrom(input, _repeated_pair_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserList : pb::IMessage<UserList> {
    private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList(UserList other) : this() {
      num_ = other.num_;
      userList_ = other.userList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList Clone() {
      return new UserList(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private uint num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "userList" field.</summary>
    public const int UserList_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::logicProto.User> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(18, global::logicProto.User.Parser);
    private readonly pbc::RepeatedField<global::logicProto.User> userList_ = new pbc::RepeatedField<global::logicProto.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.User> UserList_ {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserList other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      userList_.Add(other.userList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
          case 18: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomList : pb::IMessage<RoomList> {
    private static readonly pb::MessageParser<RoomList> _parser = new pb::MessageParser<RoomList>(() => new RoomList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList(RoomList other) : this() {
      roomList_ = other.roomList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList Clone() {
      return new RoomList(this);
    }

    /// <summary>Field number for the "roomList" field.</summary>
    public const int RoomList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::logicProto.Room> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(10, global::logicProto.Room.Parser);
    private readonly pbc::RepeatedField<global::logicProto.Room> roomList_ = new pbc::RepeatedField<global::logicProto.Room>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::logicProto.Room> RoomList_ {
      get { return roomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomList_.Equals(other.roomList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomList_.WriteTo(output, _repeated_roomList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomList other) {
      if (other == null) {
        return;
      }
      roomList_.Add(other.roomList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Res : pb::IMessage<Res> {
    private static readonly pb::MessageParser<Res> _parser = new pb::MessageParser<Res>(() => new Res());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Res> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::logicProto.LogicuserReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res(Res other) : this() {
      status_ = other.status_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res Clone() {
      return new Res(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Res);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Res other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Res other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
