// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.7.0
// source: logicuser.proto

package logicProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Meta_GetRoom_FullMethodName    = "/logicProto.Meta/GetRoom"
	Meta_NotifyRoom_FullMethodName = "/logicProto.Meta/NotifyRoom"
)

// MetaClient is the client API for Meta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaClient interface {
	GetRoom(ctx context.Context, in *UserList, opts ...grpc.CallOption) (*Room, error)
	NotifyRoom(ctx context.Context, in *RoomList, opts ...grpc.CallOption) (*Res, error)
}

type metaClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaClient(cc grpc.ClientConnInterface) MetaClient {
	return &metaClient{cc}
}

func (c *metaClient) GetRoom(ctx context.Context, in *UserList, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, Meta_GetRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) NotifyRoom(ctx context.Context, in *RoomList, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, Meta_NotifyRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServer is the server API for Meta service.
// All implementations must embed UnimplementedMetaServer
// for forward compatibility
type MetaServer interface {
	GetRoom(context.Context, *UserList) (*Room, error)
	NotifyRoom(context.Context, *RoomList) (*Res, error)
	mustEmbedUnimplementedMetaServer()
}

// UnimplementedMetaServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServer struct {
}

func (UnimplementedMetaServer) GetRoom(context.Context, *UserList) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedMetaServer) NotifyRoom(context.Context, *RoomList) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRoom not implemented")
}
func (UnimplementedMetaServer) mustEmbedUnimplementedMetaServer() {}

// UnsafeMetaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServer will
// result in compilation errors.
type UnsafeMetaServer interface {
	mustEmbedUnimplementedMetaServer()
}

func RegisterMetaServer(s grpc.ServiceRegistrar, srv MetaServer) {
	s.RegisterService(&Meta_ServiceDesc, srv)
}

func _Meta_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meta_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetRoom(ctx, req.(*UserList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_NotifyRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).NotifyRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meta_NotifyRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).NotifyRoom(ctx, req.(*RoomList))
	}
	return interceptor(ctx, in, info, handler)
}

// Meta_ServiceDesc is the grpc.ServiceDesc for Meta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logicProto.Meta",
	HandlerType: (*MetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoom",
			Handler:    _Meta_GetRoom_Handler,
		},
		{
			MethodName: "NotifyRoom",
			Handler:    _Meta_NotifyRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logicuser.proto",
}
